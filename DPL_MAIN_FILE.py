import telebot
from telebot import types
from telebot.types import ReplyKeyboardMarkup

import data
from data import BotDB
import config

bot = telebot.TeleBot(config.TOKEN, parse_mode=None)

@bot.message_handler(commands=['help'])
def help(message):
	bot.send_message(message.from_user.id, f'–°–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω:\n\n/start, /help')

@bot.message_handler(commands=['start'])
def start(message):
	# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ user_id –≤ –±–∞–∑–µ

	class_db = BotDB("DPL.db")
	user_id = message.from_user.id
	user = class_db.check_user(user_id)
	d = message.from_user.first_name

	# –ï—Å–ª–∏ user_id –Ω–µ—Ç –≤ –±–∞–∑–µ
	if user == False:
		a = 2
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

		contact = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
		markup.add(contact)

		bot.send_message(user_id, f'–ü—Ä–∏–≤–µ—Ç {d}!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–≤–æ–π –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç"', reply_markup=markup)

		bot.register_next_step_handler(message, company_name, a)


	# –ï—Å–ª–∏ user_id –µ—Å—Ç—å
	elif user == True:
		a = 1
		user_id = message.from_user.id

		d = message.from_user.first_name

		kb = types.ReplyKeyboardMarkup(True)

		item = types.KeyboardButton('–î–∞–ª–µ–µ')

		kb.add(item)

		bot.send_message(user_id, f'–ü—Ä–∏–≤–µ—Ç {d}! –ú—ã —Ä–∞–¥—ã —Å–Ω–æ–≤–∞ –í–∞—Å –≤–∏–¥–µ—Ç—å!', reply_markup=kb)
		bot.register_next_step_handler(message, send_welcome, a)






"""–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""


def company_name(message, a):
	user_id = message.from_user.id
	first_name = message.from_user.first_name
	username = message.from_user.username
	number = message.contact.phone_number

	kb = types.ReplyKeyboardMarkup(True)
	chas = types.KeyboardButton('–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ')
	yur = types.KeyboardButton('–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ')
	kb.add(chas, yur)

	bot.send_message(user_id, f'–í–∞—à–µ –∏–º—è –∑–∞–ø–∏—Å–∞–Ω–Ω–æ –∫–∞–∫ *{first_name}*\n\n–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∞–Ω –∫–∞–∫ *{number}*\n\n_–í—ã –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ –±–æ—Ç –¥–ª—è —Å–µ–±—è –∏–ª–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏?_', reply_markup=kb, parse_mode="Markdown")
	bot.register_next_step_handler(message, chas_yur, first_name, username, number, a)


def chas_yur(message, first_name, username, number, a):
	user_id = message.from_user.id

	if message.text == '–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ':
		company_name = message.text

		class_db = BotDB("DPL.db")
		user = class_db.add_user(user_id, first_name, username, number, company_name)

		bot.send_message(user_id, f'–í–∞—à–µ –∏–º—è –∑–∞–ø–∏—Å–∞–Ω–Ω–æ –∫–∞–∫ *{first_name}*\n\n–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∞–Ω –∫–∞–∫ *{number}\n\n{company_name}*', parse_mode="Markdown")
		bot.register_next_step_handler(message, send_welcome, a)

	elif message.text == '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ':

		bot.send_message(user_id, f'–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:')
		bot.register_next_step_handler(message, yur, first_name, username, number, a)


def yur(message, first_name, username, number, a):
	user_id = message.from_user.id

	company_name = message.text

	class_db = BotDB("DPL.db")
	user = class_db.add_user(user_id, first_name, username, number, company_name)

	kb = types.ReplyKeyboardMarkup(True)

	next = types.KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâ')

	kb.add(next)

	bot.send_message(user_id, f'–í–∞—à–µ –∏–º—è –∑–∞–ø–∏—Å–∞–Ω–Ω–æ –∫–∞–∫ *{first_name}*\n\n–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∞–Ω –∫–∞–∫ *{number}\n\n{company_name}*\n\n_–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!_', reply_markup=kb, parse_mode="Markdown")
	bot.register_next_step_handler(message, send_welcome, a)










def send_welcome(message, a):
	if a == 2:

		user_id = message.from_user.id

		user_id = message.from_user.id
		kb = types.ReplyKeyboardMarkup(True)

		Feedback = types.KeyboardButton('üì® –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
		About_Us = types.KeyboardButton('üß∏ –û –Ω–∞—Å')
		Order = types.KeyboardButton('üéâ –ó–∞–∫–∞–∑–∞—Ç—å')
		Profil = types.KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å')

		kb.add(Feedback, About_Us, Order, Profil)


		bot.send_message(user_id, '_HELLO WORLD! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è DPL!_\n\n*–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞?üëá*',reply_markup=kb, parse_mode="Markdown")
		bot.register_next_step_handler(message, menu)

	elif a == 1:
		user_id = message.from_user.id
		kb = types.ReplyKeyboardMarkup(True)

		Feedback = types.KeyboardButton('üì® –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
		About_Us = types.KeyboardButton('üß∏ –û –Ω–∞—Å')
		Order = types.KeyboardButton('üéâ –ó–∞–∫–∞–∑–∞—Ç—å')
		Profil = types.KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å')

		kb.add(Feedback, About_Us, Order, Profil)

		#markdown = """*bold text* _italic text_ [text](URL) """


		bot.send_message(user_id, '_HELLO WORLD! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è DPL!_\n\n*–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞?*üëá', reply_markup=kb, parse_mode="Markdown")
		bot.register_next_step_handler(message, menu)

	elif a == 3:
		user_id = message.from_user.id
		kb = types.ReplyKeyboardMarkup(True)

		Feedback = types.KeyboardButton('üì® –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
		About_Us = types.KeyboardButton('üß∏ –û –Ω–∞—Å')
		Order = types.KeyboardButton('üéâ –ó–∞–∫–∞–∑–∞—Ç—å')
		Profil = types.KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å')

		kb.add(Feedback, About_Us, Order, Profil)

		bot.send_message(user_id, '_–í—ã —Å–Ω–æ–≤–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é_\n\n*–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞?üëá*', reply_markup=kb, parse_mode="Markdown")
		bot.register_next_step_handler(message, menu)

@bot.message_handler(content_types='text')
def menu(message):
	if message.text == 'üéâ –ó–∞–∫–∞–∑–∞—Ç—å':
		user_id = message.from_user.id

		kb = types.ReplyKeyboardMarkup(True)
		go_back = types.KeyboardButton('üëà –í –º–µ–Ω—é')
		miss = types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üëâ')
		kb.add(go_back, miss)

		class_db = BotDB("DPL.db")
		phone = class_db.check_phone(user_id)
		phone_nomer = phone[0][0]

		bot.send_message(user_id, f'–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∏–º–µ–Ω–Ω–æ —É –Ω–∞—Å!\n–û—Å—Ç–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –∏ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!\n\n–ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º—ã –∑–∞–ø–∏—Å–∞–ª–∏ –≤–æ—Ç —ç—Ç–æ—Ç –í–∞—à –Ω–æ–º–µ—Ä\nüì±*+{phone_nomer[0]}{phone_nomer[1]}{phone_nomer[2]} {phone_nomer[3]}{phone_nomer[4]} {phone_nomer[5]}{phone_nomer[6]}{phone_nomer[7]} {phone_nomer[8]}{phone_nomer[9]} {phone_nomer[10]}{phone_nomer[11]}*\n\n_–ï—Å–ª–∏ –æ–Ω –∞–∫—Ç—É–∞–ª–µ–Ω –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üëâ"_\n\n*–ï—Å–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω –Ω–µ –≤–µ—Ä–Ω–æ, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–∏—Å–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º –¥–ª—è –≤–∞—Å —Ñ–æ—Ä–º–∞—Ç–µ*', reply_markup=kb, parse_mode="Markdown")
		bot.register_next_step_handler(message, phone_number, phone_nomer)

	elif message.text == 'üì® –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
		user_id = message.from_user.id
		bot.send_message(user_id, 'üì® –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
	elif message.text == 'üß∏ –û –Ω–∞—Å':
		user_id = message.from_user.id
		bot.send_message(user_id, 'üß∏ –û –Ω–∞—Å')
	elif message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
		user_id = message.from_user.id

		kb = types.ReplyKeyboardMarkup(True)
		miss = types.KeyboardButton('üìù –ò–∑–º–µ–Ω–∏—Ç—å')
		orders = types.KeyboardButton('‚≠ê –ú–æ–∏ –∑–∞–∫–∞–∑—ã')
		go_back = types.KeyboardButton('üëà –í –º–µ–Ω—é')

		kb.add(miss, orders, go_back)

		class_db = BotDB("DPL.db")

		phone = class_db.check_phone(user_id)
		phone_nomer = phone[0][0]

		ima = class_db.check_first_name(user_id)
		imya = ima[0][0]

		c_imya = class_db.company_name(user_id)
		company_imya = c_imya[0][0]

		status_orders = class_db.company_name(user_id)
		status_order = status_orders[0][0]

		bot.send_message(user_id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n_-–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ_\n_-–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞_', parse_mode="Markdown")
		bot.send_message(user_id, f'–ú—ã –í–∞—Å –∑–Ω–∞–µ–º –∫–∞–∫:   *{imya}*\n–í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –Ω–∞–∑–≤–∞–µ—Ç—Å—è:   *{company_imya}*\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:   *{phone_nomer} *\n\n_–ß—Ç–æ –±—ã –í—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?_', parse_mode="Markdown", reply_markup=kb)
		bot.register_next_step_handler(message, acc)







"–ö–ù–û–ü–ö–ê –ó–ê–ö–ê–ó–ê–¢–¨"


def phone_number(message, phone_nomer):

	if message.text == 'üëà –í –º–µ–Ω—é':
		a = 3
		send_welcome(message, a)

	elif message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üëâ':
		user_id = message.from_user.id

		kb = types.ReplyKeyboardMarkup(True)
		go_back = types.KeyboardButton('üëà –í –º–µ–Ω—é')
		kb.add(go_back)

		bot.send_message(user_id, f'*–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ —Ç–µ—Ö. –∑–∞–¥–∞–Ω–∏–µ*', reply_markup=kb, parse_mode="Markdown")
		bot.register_next_step_handler(message, description, phone_nomer)

	else:
		user_id = message.from_user.id

		kb = types.ReplyKeyboardMarkup(True)
		go_back = types.KeyboardButton('üëà –í –º–µ–Ω—é')
		kb.add(go_back)

		phone_nomer = message.text

		bot.send_message(user_id, f'*–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ —Ç–µ—Ö. –∑–∞–¥–∞–Ω–∏–µ*', reply_markup=kb, parse_mode="Markdown")
		bot.register_next_step_handler(message, description, phone_nomer)


def description(message, phone_nomer):
	if message.text == 'üëà –í –º–µ–Ω—é':
		a = 3
		send_welcome(message, a)
	else:
		user_id = message.from_user.id
		kb = types.ReplyKeyboardMarkup(True)

		go_back = types.KeyboardButton('üëà –í –º–µ–Ω—é')
		aprove = types.KeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
		kb.add(go_back, aprove)

		class_db = BotDB("DPL.db")
		user_id = message.from_user.id

		ima = class_db.check_first_name(user_id)
		imya = ima[0][0]

		c_imya = class_db.company_name(user_id)
		company_imya = c_imya[0][0]

		description_text = message.text
		bot.send_message(user_id, f'–í—ã –±—É–¥–µ—Ç–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã –∫–∞–∫ *{imya}*\n–ò–∑ –∫–æ–º–ø–∞–Ω–∏–∏ *{company_imya}*\n–° –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: *{phone_nomer}*\n\n–í–∞—à–µ –¢.–ó.:\n*{description_text}*\n\n_–ï—Å–ª–∏ –í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –∏ –º—ã –∑–∞–ø–∏—à–µ–º –í–∞—à –∑–∞–ø—Ä–æ—Å!_', reply_markup=kb, parse_mode="Markdown")
		bot.register_next_step_handler(message, anketa, phone_nomer, description_text)

def anketa(message, phone_nomer, description_text):
	if message.text == 'üëà –í –º–µ–Ω—é':
		a = 3
		send_welcome(message, a)
	else:
		class_db = BotDB("DPL.db")

		a = 3
		user_id = message.from_user.id
		sequence = class_db.sequence_number(user_id)
		len_sequence_order = len(sequence)
		id_order = f'{user_id}{len_sequence_order}'

		bot.send_message(user_id, f'_*–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!*_', parse_mode="Markdown")

		class_db.add_order(user_id, id_order, phone_nomer, description_text)

		send_welcome(message, a)







"""–ö–ù–û–ü–ö–ê –ü–†–û–§–ò–õ–¨"""


def acc(message):

	if message.text == 'üëà –í –º–µ–Ω—é':
		a = 3
		send_welcome(message, a)
	elif message.text == 'üìù –ò–∑–º–µ–Ω–∏—Ç—å':
		a = 3

		kb = types.ReplyKeyboardMarkup(True)

		go_back = types.KeyboardButton('üëà –í –º–µ–Ω—é')
		kb.add(go_back)


		user_id = message.from_user.id
		bot.send_message(user_id, f'–ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–æ üìù –ò–∑–º–µ–Ω–∏—Ç—å', reply_markup=kb)
		bot.register_next_step_handler(message, send_welcome, a)
	elif message.text == '‚≠ê –ú–æ–∏ –∑–∞–∫–∞–∑—ã':
		a = 3

		kb = types.ReplyKeyboardMarkup(True)

		go_back = types.KeyboardButton('üëà –í –º–µ–Ω—é')
		kb.add(go_back)

		user_id = message.from_user.id
		orders = ['zakaz 1', 'zakaz 2']
		for i in orders:

			markup_inline = types.InlineKeyboardMarkup()
			item_add = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –∑–∞–∫–∞–∑—É', callback_data='add')
			markup_inline.add(item_add)
			# class_db = BotDB("DPL.db")
			# user_orders = class_db.get_user_orders(user_id)
			bot.send_message(user_id, f'{i}\n', reply_markup=markup_inline)

		# bot.register_next_step_handler(message, send_welcome, a)
		# class_db = BotDB("DPL.db")
		# list_id_orders = []
		# sequence_numbers = class_db.sequence_number(user_id)
		# for i in sequence_numbers:
		# 	list_id_orders.append(i)
		# bot.send_message(user_id, f'{i for i in list_id_orders} {list_id_orders}')


@bot.callback_query_handler(func=lambda call: True)
def answer(call):

	if call.data == 'add':
		markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
		back = types.KeyboardButton('üëà –í –º–µ–Ω—é')

		markup_reply.add(back)
		bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:', reply_markup=markup_reply)
		print(call)

		def wait(call):
			bot.register_next_step_handler(call, add_info_to_orders())

		wait(call)
	else:
		pass

def add_info_to_orders(call):
	bot.send_message(user_id, f'_*–ú—ã –¥–æ–ø–æ–ª–Ω–∏–ª–∏ –í–∞—à –∑–∞–∫–∞–∑ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π*_', parse_mode="Markdown")
	# if message.text == 'üëà –í –º–µ–Ω—é':
	# 	a = 3
	# 	send_welcome(message, a)
	# else:
	# 	user_id = message.from_user.id
	# 	bot.send_message(user_id, f'_*–ú—ã –¥–æ–ø–æ–ª–Ω–∏–ª–∏ –í–∞—à –∑–∞–∫–∞–∑ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π*_', parse_mode="Markdown")

bot.polling()